infinite Unlimited eternity MUGEN
arms ; soldiers ; force ; weapons ; military ; pawn
Infinite Pawn
------------------------------------

https://github.com/thomas-pan/chinaportal



https://github.com/intel-web-engineering-development/FirstTimeBuyer

cd D:
cd Simplecore/FirstTimeBuyer/
git pull + URL 

git init
git add .
git commit -m "v2.1"
git fetch + URL
git push + URL
git tag -a v2.1 -m "v2.1"
git push origin v2.1

------------------------------------

------------------------------------

Adding an existing project to GitHub using the command line

$ git init

$ git add .
# Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.

$ git commit -m "First commit"
# Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again.

$ git remote add origin remote repository URL
# Sets the new remote
$ git remote -v
# Verifies the new remote URL

$ git push origin master
# Pushes the changes in your local repository up to the remote repository you specified as the origin

------------------------------------


2016-05-20

https://github.com/wuxianbing2011/gitstudy

$ git add reademe.txt
#把readme.txt添加到暂存区里面

$ git commti -m "v1.0"
#提交readme.txt 并添加注释为“v1.0”

$ git status
#查看状态（是否还有文件没有提交）
On branch master
nothing to commit, working directory clean

如果更改了readme.txt文件
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   README.txt

no changes added to commit (use "git add" and/or "git commit -a")



------------------------------------

2016-05-23

https://github.com/wuxianbing2011/gitstudy

Git命令可以很方便地重命名本地分支
$ git branch -m <old_branch_name> <new_branch_name>

删除远程待修改的分支名（注意：git branch -d YourBranchName只能删除本地的branch）
$ git push origin :YourBranchName

最后将本地的新分支名push到远程：
$ git push origin



查看分支
git branch
或者
git branch -v
 
A) 创建分支
git branch mystudygit1.0
 
B) 切换分支
git checkout mystudygit1.0
 
C) 删除分支
git branch -d mystudygit1.0  //如果该分支没有合并到主分支会报错
或者
git branch -D mystudygit1.0   //强制删除
 
D) 分支合并
比如，如果要将开发中的分支（develop），合并到稳定分支（master），
          首先切换的master分支：git checkout master。
然后执行合并操作：git merge develop。
如果有冲突，会提示你，调用git status查看冲突文件。
解决冲突，然后调用git add或git rm将解决后的文件暂存。
所有冲突解决后，git commit 提交更改。
例如：将acc2f69提交合并到当前分支
git merge acc2f69
 
E）合并
 
 
git如何clone 远程github中的分支？
git clone -b release_branch https://github.com/jetty/




------------------------------------


http://mobile.51cto.com/hot-481240.htm

http://blog.jobbole.com/87700/





------------------------------------
Git怎样撤销一次分支的合并Merge

如果确定放弃这次合并的提交，假如是 merge 了错误的分支到 master，先通过git reflog或者 gitg、gitk、qgit 等工具确定你 merge 之前 master 所在的 commit，然后在 master 分支上使用
git reset --hard <commit
重置头指针。一般来说，在 master 上直接执行
git reset --hard HEAD~
也可以回到合并之前的提交，但
git reset --hard
命令还是使用确定的 commit 为好。注意，
git reset --hard
命令有风险，除非十分确定要放弃当前提交，否则最好先git branch为当前的提交建立个新的分支引用后再继续，待确定无误后删除即可。
如果错误的合并之后又有了新的提交，可以在完成前述正确的合并之后，通过
git rebase --onto <错误的合并提交 <正确的合并提交 <新提交所在分支
来在正确的合并提交上重建新的提交。
git rebase --onto
命令所重建的提交序列最好是线性的，否则非线性的提交会变成线性的。若需要保存非线性的提交历史，可以考虑使用
参数，不过结果很不可靠，具体视提交的非线性程度而定。